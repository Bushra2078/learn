### YamlMime:ModuleUnit
uid: learn.iot.build-azure-digital-twins-graph-for-chocolate-factory.exercise-querying-digital-twin-graphs
metadata:
  description: In this final exercise, you create custom queries for your digital twin graph.
  ms.date: 10/1/2020
  author: raniabayoumy
  ms.author: rabayoum
  ms.topic: interactive-tutorial
  ms.prod: learning-azure
title:  Exercise - Querying digital twin graphs
durationInMinutes: 8
content: |
  [!include[](includes/9-exercise-querying-digital-twin-graphs.md)]
quiz:
  title: Check your knowledge
  questions:

  - content: 'What are the fields of an Azure Digital Twins Definition Language (DTDL) interface?'
    choices: 
    - content: '@type, name, schema'
      isCorrect: false
      explanation: Good guess, but these are the attributes of the contents entry in a model.
    - content: 'Property, Telemetry, Component, Relationship'
      isCorrect: true
      explanation: Properties are stored data, telemetry are measurements, components aid in organization, and relationships include contains, heats, cools, and 'isBilledTo'.
    - content: '@id, @type, @context, displayName, contents'
      isCorrect: false
      explanation: Good guess, but these are the fields of a model, not the interface.
    - content: 'primitive types, and Object, Map, Enum'
      isCorrect: false
      explanation: These are the schema values for model property or telemetry.

  - content: 'What is the difference between a DTDL property and DTDL telemetry?'
    choices: 
    - content: 'There is no significant difference.'
      isCorrect: false
      explanation: Properties and telemetry aren't interchangeable.
    - content: 'Properties are expected to have storage, that can be written to if necessary. Telemetry is a stream of values.'
      isCorrect: true
      explanation: Typically telemetry is sent by a sensor (such as for temperature, humidity, or pressure). Properties might include ID, or date of last maintenance.
    - content: 'Properties don't change, whereas telemetry changes continuously.'
      isCorrect: false
      explanation: Telemetry might not change, and properties can be set as writable, and written to.
    - content: 'Telemetry is for IoT devices, whereas properties are for digital twins.'
      isCorrect: false
      explanation: IoT devices do send telemetry, and properties are an important component of digital twin models. But digital twin models can have telemetry components.

  - content: 'You have a set of models, some of which contain a temperature property. Which of the following queries return all models with a temperature less than 65 degrees?'
    choices: 
    - content: 'SELECT * FROM DigitalTwins T WHERE T.Temp < 65'
      isCorrect: false
      explanation: Close, but Temp isn't the correct name of the property.
    - content: 'SELECT * FROM DigitalTwins T WHERE T.Temperature < 65'
      isCorrect: true
      explanation: The >, <, = and != are acceptable comparisons in a query.
    - content: 'SELECT * FROM DigitalTwins WHERE IS_DEFINED(Temperature)'
      isCorrect: false
      explanation: This query would return all models with a temperature property.
    - content: 'if (Temperature < 65) return model.name;'
      isCorrect: false
      explanation: This answer doesn't have the right syntax.

  - content: 'What is a distinction between a FROM clause in a SQL-type language and a FROM clause in the Azure Digital Twins query language?'
    choices:
      - content: 'In the Azure Digital Twins query language, you can only have one JOIN statement in the FROM clause, while in a SQL-type language, you can have multiple such statements.'
        isCorrect: false
        explanation: You can use an N amount of JOIN statements following the FROM statement in the Azure Digital Twins query language.
      - content: 'In the Azure Digital Twins query language, each expression in a FROM clause isn't a table. Instead, the FROM clause expresses a cross-entity relationship traversal, and it's written with an Azure Digital Twins version of JOIN.'
        isCorrect: true
        explanation: This answer is correct. The distinction is that in a SQL-type language, each expression in a FROM clause is a separate table.
      - content: 'In the Azure Digital Twins query language, the FROM clause is used to specify which table to select data from, while in a SQL-type language, each expression in a FROM clause expresses a cross-entity relationship traversal.'
        isCorrect: false
        explanation: In a SQL-type language, the FROM clause is used to specify which table to select data from. While in the Azure Digital Twins query language, each expression in a FROM clause expresses a cross-entity relationship traversal.
