### YamlMime:ModuleUnit
uid: learn.python-oo.8-knowledge-check
title: Knowledge check
metadata:
  title: Knowledge check
  description: Four multiple-choice questions
  ms.date: 12/01/2020
  author: softchris
  ms.author: chnoring
  ms.topic: interactive-tutorial
  ms.prod: learning-azure
durationInMinutes: 4
content: |
  [!include[](includes/8-knowledge-check.md)]
quiz:
  title: Check your knowledge
  questions:
    - content: The difference between a class and an object is?
      choices:
        - content: They're the same thing.
          isCorrect: false
          explanation: They're not the same thing. A class is a blueprint. The object is what you create from the blueprint and what actual is created when you run your program.
        - content: A class is a blueprint. An object is the concrete instance you build from the blueprint.
          isCorrect: true
          explanation: A class is where you write all the code. You later create an instance of a the class, a so called object.
        - content: A class has data, an object does not.
          isCorrect: false
          explanation: The class is the object's blueprint. Whatever the class has, the object has as well.
        - content: A class has methods, an object does not.
          isCorrect: false
          explanation: The class is the object's blueprint. Whatever the class has, the object has as well.
    - content: How does Python implement accessors?
      choices:
        - content: It uses prefixes, one underscore `_` in the beginning of the name indicates this variable is _protected_. Two underscores `__` will make the variable _private_ and will raise an exception if assigned.
          isCorrect: true
          explanation: Using prefixes to the variable name is how Python using accessors and able to hide your data at different levels.
        - content: It uses the keyword _private_ and _public_.
          isCorrect: false
          explanation: Languages like Java and C# for example uses private and public. Python uses prefixes on the naming of the variable.
        - content: Everything in a Python class is by default hidden and must be exposes by adding methods returning the variables values.
          isCorrect: false
          explanation: Everything defined on a class is public. You need to change the variable naming, using prefixes, to _hide_ data from other objects.
        - content: Add the decorator @public or @private to make something public or private.
          isCorrect: false
          explanation: Python makes heavy use of decorators, these two mentioned decorators don't exist.
    - content: Choose the best explanation that explains the keyword `self`?
      choices:
        - content: It's a keyword that refers to the object instance, you can also use the `this` keyword.
          isCorrect: false
          explanation: While it's true that `self` refers to the object instance, you cannot use the `this` keyword to refer to an object instance.
        - content: The `self` keyword refers to underlying class of the object.
          isCorrect: false
          explanation: The `self` keyword refers to the underlying object instance, not the class.
        - content: The only time the `self` keyword is used is to refer to members of the object, and is passed as a parameter.
          isCorrect: false
          explanation: It's true that `self` is passed as a parameter if the method wants to refer to members of the object. However, you need `self` as well when you add variables to the object instance at construction time. 
        - content: The `self` keyword refers to the object instance. Variables that are part of the object instance needs to be assigned to self.  The `self` keyword is also passed to every method of a class that needs to access the object instance.
          isCorrect: true
          explanation: The `self` keyword is passed to methods that needs access to members on the object. In any kind of communication with the object instance, the `self` keyword needs to be used. It's used to refer to attribute on the instance as well as methods. 