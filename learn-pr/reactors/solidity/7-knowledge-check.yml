### YamlMime:ModuleUnit
uid: learn.reactors.blockchain-learning-solidity.7-knowledge-check
title: Knowledge check
metadata:
  title: Knowledge check
  description: Check your knowledge.
  ms.date: 10/05/2020
  author: meaghanlewis
  ms.author: shanama
  ms.topic: interactive-tutorial
  ms.prod: learning-azure
durationInMinutes: 1  
content: |
quiz:
  title: Check your knowledge.
  questions:
  - content: 'Solidity smart contracts are run on:'
    choices:
    - content: 'Ethereum blockchain'
      isCorrect: false
      explanation: 'Incorrect. *Ethereum blockchain* is the name of the platform that Solidity targets. But tests are not run on Ethereum blockchain.'
    - content: 'The Ethereum virtual machine'
      isCorrect: false
      explanation: 'Correct. Solidity runs contracts on the Ethereum virtual machine. This sandboxed environment self-contains all the transaction history for the contracts.'
    - content: 'Any virtual machine'
      isCorrect: false
      explanation: 'Incorrect. A virtual machine is an option to run tests in, but a specific kind of virtual machine is used for Solidity smart contracts.'
    - content: 'Any sandbox environment'
      isCorrect: true
      explanation: 'Incorrect. The Ethereum virtual machine is a sandboxed and isolated environment, but a specific kind of virtual machine is used for Solidity smart contracts.'

  - content: 'Events describe actions that are taken in a contract. Which syntax defines an event?'
    choices:
    - content: 'event PurchasedItem'
      isCorrect: false
      explanation: 'Incorrect. The event must be called like a function with a set of parenthesis at the end like `event PurchasedItem()`. The parentheses include any necessary arguments.'
    - content: 'event PurchasedItem(address buyer, uint price);'
      isCorrect: false
      explanation: 'Correct. To define an event, use the keyword `event`. Name the event and include the arguments, if any, inside parentheses.'
    - content: 'emit PurchasedItem(address buyer, uint price);'
      isCorrect: false
      explanation: 'Incorrect. This is the syntax to call the event and create an entry in the transactions log.'
    - content: 'PurchasedItem(address buyer, uint price);'
      isCorrect: true
      explanation: 'Incorrect. This would be the syntax to call a function that's previously been defined, not an event.'

  - content: 'What is an example of a user-defined type in Solidity?'
  choices:
  - content: 'Structs'
    isCorrect: false
    explanation: 'Correct. Structs are user-defined because you can define the collection of items within a struct.'
  - content: 'State variables'
    isCorrect: false
    explanation: 'Incorrect. State variables use defined types like uint, int, bool, and addresses to hold values that are used in contracts.'
  - content: 'Addresses'
    isCorrect: false
    explanation: 'Incorrect. Addresses are 20-byte value types that represent an Ethereum user account. A value is specified for a given address type.'
  - content: 'Arrays'
    isCorrect: true
    explanation: 'Incorrect. Arrays use defined types to store a collection of similar items of the same type in a data structure.'

  - content: 'What is typically the first line of a smart contract source file?'
  choices:
  - content: 'A contract definition'
    isCorrect: false
    explanation: 'Incorrect. The contract definition is required as part of the source file, but it is not the first line.'
  - content: 'A pragma directive'
    isCorrect: false
    explanation: 'Correct. Pragma is the keyword that you use to ask the compiler to check whether its version of Solidity matches the required version.'
  - content: 'A Solidity version'
    isCorrect: false
    explanation: 'Incorrect. A Solidity version is part of the pragma directive but does not include the keyword for the compiler to check.'
  - content: 'An event'
    isCorrect: true
    explanation: 'Incorrect. Events are typically part of every smart contract but are not required, and they exist inside the contract definition.'
- 