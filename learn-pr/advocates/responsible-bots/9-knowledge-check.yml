### YamlMime:ModuleUnit
uid: learn.advocates.responsible-bots.9-knowledge-check
title: Knowledge check
metadata:
  title: Knowledge check
  description: Review what you've learned in the course about responsible bots.
  ms.date: 04/09/2021
  author: shwars
  ms.author: dmitryso
  ms.topic: interactive-tutorial
  ms.prod: learning-advocates
  ms.custom: team=nextgen
durationInMinutes: 5
quiz:
  questions: 
  - content: "Why do developers need to understand the principles of responsible conversational UI?"
    choices:
    - content: "Because developers are ultimately responsible for their deployed bots."
      isCorrect: true
      explanation: "Correct. Developers should take responsibility for their code."
    - content: "To make more diverse bots."
      isCorrect: false
      explanation: "Incorrect. Support for diversity is only one aspect of responsible UI."
    - content: "To design better conversation flow."
      isCorrect: false
      explanation: "Incorrect. Good conversation flow design is only one aspect of responsible UI."
 
  - content: "Should a bot try to mimic a human as closely as possible?"
    choices:
    - content: "Yes. A good bot should speak to you as though it's human."
      isCorrect: false
      explanation: "Incorrect. A user who thinks they're talking to a human can be disappointed when they have problems with the bot. It's better to make it clear to the user that they're talking to a bot."
    - content: "No. A good bot makes it clear that it's a bot and not a person."
      isCorrect: true
      explanation: "Correct! It's always better to explicitly introduce a bot as a bot at the beginning of a conversation."

  - content: "What should a bot do if it doesn't understand a problem or can't solve an issue?"
    choices:
    - content: "Apologize to the user."
      isCorrect: false
      explanation: "Incorrect. While giving an apology might be a good idea, the bot should also try to help the user solve their problem."
    - content: "Try to talk the user away from the problem."
      isCorrect: false
      explanation: "Incorrect. This tactic is definitely not a good idea. It can degrade a user's trust in the bot."
    - content: "Transition the conversation to a human."
      isCorrect: true
      explanation: "Correct. Bots that handle the beginning of a conversation, and then hand off to a human, can reduce the workload of human operators. Bots that are designed in this manner can still offer high-quality support to the user."

  - content: "How can we make sure users with visual impairment can use our bots?"
    choices:
    - content: "Use special braille devices for communication."
      isCorrect: false
      explanation: "Incorrect. Supporting braille devices can help. Some users might not have the device. There's a better way to provide support for more users."
    - content: "Use text-to-speech and speech-to-text to create a voice interface for the bot."
      isCorrect: true
      explanation: "Correct! Bot Framework supports passing voice messages over chat channels via SSML markup or attachments."
    - content: "Users with visual impairment can't use conversational UI."
      isCorrect: false
      explanation: "Incorrect. There are methods for making conversational UI inclusive to everyone."

  - content: "What tools can you use to develop bots for the Azure Bot Service?"
    choices:
    - content: "Online Code Editor"
      isCorrect: false
      explanation: "Incorrect. You can use Online Code Editor, but it's not the only choice."
    - content: "Visual Studio"
      isCorrect: false
      explanation: "Incorrect. You can use Visual Studio, but it's not the only choice."
    - content: "Visual Studio and Online Code Editor"
      isCorrect: true
      explanation: "Correct! You can develop code either with the Visual Studio IDE on your local machine, or you can use the online code editor in a browser."

  - content: "How do you make a bot understand natural language?"
    choices:
    - content: "Provide a list of all possible phrases and then check if the user's input corresponds to any phrase on the list."
      isCorrect: false
      explanation: "Incorrect. It's not possible to provide a comprehensive list of all phrases. You do need to provide a set of phrases, but they don't have to match the user's input text exactly."
    - content: "Provide a list of some phrases for each possible intent, and use an AI model to match the user's input to one of the intents."
      isCorrect: true
      explanation: "Correct! This process is automatically handled by the LUIS service."
    - content: "Program different regular expressions to match the phrase to the best intent."
      isCorrect: false
      explanation: "Incorrect. An attempt to match all phrases by providing individual regular expressions would be a complex task. Even so, the results would likely be poor."

  - content: "You decide to implement chit-chat functionality in your bot with support for different conversation styles like formal and colloquial. You want the bot to switch between the styles according to the user's age. How do you achieve this functionality?"
    choices:
    - content: "QnA Maker automatically supports different communication styles. You can select any one of them at runtime."
      isCorrect: false
      explanation: "Incorrect. You need to choose the communication styles that you will support when you create the QnA Maker model. At runtime, the bot can switch between the styles you specified when you created the model."
    - content: "The best way is to add chit-chat functionality to your knowledge base."
      isCorrect: true
      explanation: "Correct. The QnA Maker service supports different chit-chat personalities for your knowledge base. You choose the communication styles that you will support when you create the QnA Maker model. Then, the bot can switch between these styles at runtime."
    - content: "You can create different QnA Maker models for each personality."
      isCorrect: false
      explanation: "Incorrect. While you can create different models, it's not the easiest option. The best approach is choose multiple communication styles when you create the QnA Maker model. Then, the bot can switch between these styles at runtime."

  - content: "Sometimes a user can get frustrated with a bot. A common scenario is when a user isn't sure how to phrase a question. How can you design your bot to communicate effectively with users?"
    choices:
    - content: "Handle communication with the user through a menu with predefined choices."
      isCorrect: false
      explanation: "Incorrect. This design practice is a good idea, but it's not the only option."
    - content: "Provide a help command to show the possible phrases for the user to input."
      isCorrect: false
      explanation: "Incorrect. This design practice is a good idea, but it's not the only option."
    - content: "Provide a meaningful welcome message to explain to the user what phrases are accepted as input."
      isCorrect: false
      explanation: "Incorrect. This design practice isn't the easiest approach or the best way."
    - content: "All of the above."
      isCorrect: true
      explanation: "Correct! The best way to build a more responsible UI is to implement a combination of design practices that work together to create a positive user experience."

  - content: "Suppose you want to create a bot to help users find their favorite dish in a restaurant. How would you design the user input?"
    choices:
    - content: "Users can type in the restaurant's menu."
      isCorrect: false
      explanation: "Incorrect. This approach isn't recommended. It can be difficult to enter a large amount of text, such as a restaurant menu, especially on a phone."
    - content: "Users can send a picture of a menu to the bot."
      isCorrect: true
      explanation: "Correct! Most bot platforms support sending files or pictures as attachments."
    - content: "Users can upload a picture of the menu to cloud storage, and then send the url to the bot."
      isCorrect: false
      explanation: "Incorrect. This approach isn't recommended. The bot can accept URL as input, but the overall user experience for this design could be frustrating."
