### YamlMime:ModuleUnit
uid: learn.languages.csharp-choose-data-type.knowledge-check
title: Knowledge check
metadata:
  title: Knowledge check
  description: Review what you've learned
  ms.date: 09/05/2019
  author: billwagner
  ms.author: wiwagn
  ms.topic: interactive-tutorial
  ms.prod: learning-languages
durationInMinutes: 3
quiz:
  title: Check your knowledge
  questions:
  - content: "Suppose you're writing code that must store whole numeric values between negative and positive `1,000,000`.  Which data type should you choose?"
    choices:
    - content: "float"
      isCorrect: false
      explanation: "While you could use `float`, its extra precision after the decimal doesn't fit the exact requirement of this scenario."
    - content: "double"
      isCorrect: false
      explanation: "While you could use `double`, its extra precision after the decimal doesn't fit the exact requirement of this scenario."
    - content: "uint"
      isCorrect: false
      explanation: "`uint` won't store negative values."
    - content: "int"
      isCorrect: true
      explanation: "Correct!"
  - content: "Suppose you're building a game and need to store lots of fractional values representing x, y, and z positions in a large 3D space. You'll likely need to perform physics calculations for trajectories and so on. You're not concerned about absolute precision, but you're concerned with how efficiently your program runs. Which data type should you choose?"
    choices:
    - content: "float"
      isCorrect: true
      explanation: "Correct!"
    - content: "decimal"
      isCorrect: false
      explanation: "While `decimal` can store large fractional numbers, they require more memory to store all the precision. Furthermore, they're less efficient than float or double. Finally, they can return precise calculated values, but the question says that's not a priority in this situation."
    - content: "uint"
      isCorrect: false
      explanation: "`uint` can't store fractional numbers."
    - content: "int"
      isCorrect: false
      explanation: "`int` can't store fractional numbers."
  - content: "Which of the following statements is **true**?"
    choices:
    - content: "Reference types are stored in the stack."
      isCorrect: false
      explanation: "Reference types are stored in the heap."
    - content: "Value types can only store numbers."
      isCorrect: false
      explanation: "While we focused on integral and floating-point data types, `char` is also a value type, and there are other non-numeric value types, like `struct` and `enum`."
    - content: "Use the `new` operator to create a new instance of a reference type and return its address to the variable."
      isCorrect: true
      explanation: "Correct!"
    - content: "Use the `new` operator to create new instances of integral and floating-point data types."
      isCorrect: false
      explanation: "The `new` operator is for reference types. Integral and floating-point data types are value types."
