### YamlMime:ModuleUnit
title: Summary and knowledge check
uid: learn-windows.windows-ui-navigation-media.4-summary-and-knowledge-check
metadata:
  title: Summary and knowledge check
  description: Review and check your understanding of adding navigation and media support to the UI of your Windows 10 app.
  ms.date: 3/1/2019
  displayType: one-Column
  author: LanceMcCarthy
  ms.author: quradic
  ms.topic: interactive-tutorial
  ms.prod: learning-windows
  
durationInMinutes: 5
content: |
    [!include[](includes/4-summary-and-knowledge-check.md)]
quiz:
    title: Knowledge check
    questions:
    - content: What's the easiest way to pass information between pages in a Windows app?
      choices:
      - content: Record the information in the app's code before you leave the first page, and read it from the same location when you load the second page.
        explanation: This is a cumbersome and awkward way to pass information. There's an easier way to do things.
        isCorrect: false
      - content: Information can't be passed between pages in an app.
        explanation: It would be hard to develop complex apps if app frameworks didn't allow you to pass information between pages.
        isCorrect: false
      - content: You must use specific navigation methods to pass data between pages.
        explanation: The standard navigation method in Windows apps supports passing data between pages.
        isCorrect: false
      - content: You can pass additional information into the Frame.Navigate method, and the information will be passed to the target page.
        explanation: Correct! Frame.Navigate can take any piece of information that inherits from Object as a parameter to pass to the target page.
        isCorrect: true
    - content: How does the Navigate method of a WebView or WebBrowser control work?
      choices:
      - content: Navigate directs the control to a web page to display.
        explanation: Navigate can also be used to display offline HTML content.
        isCorrect: false
      - content: Navigate tells the control where to find valid HTML content, and the control displays the content.
        explanation: Correct! Navigate is used to display both web pages and offline HTML content.
        isCorrect: true
      - content: Navigate tells the control where to find valid HTML content, but not to display it.
        explanation: The control will automatically display the content passed to it through the Navigate method.
        isCorrect: false
      - content: Navigate controls backward and forward movement in the control.
        explanation: You can use the GoBack and GoForward methods for forward and backward navigation in these controls.
        isCorrect: false
    - content: In UWP, the MediaElement control has a CurrentStateChanged event that doesn't exist in WPF. What does this event let you do?
      choices:
      - content: CurrentStateChanged lets you track the status of your MediaElement control.
        explanation: WPF apps can also track the status of their controls through a collection of other events.
        isCorrect: false
      - content: CurrentStateChanged enables you to use transport controls like streaming and timeline.
        explanation: While transport controls aren't available on the WPF version of MediaElement, they're separate from CurrentStateChanged.
        isCorrect: false
      - content: CurrentStateChanged lets you consolidate all the code about your MediaElement's status into a single event handler.
        explanation: Correct! The CurrentStateChanged event makes it much more convenient for UWP apps to manage media playback because they can handle all the logic in one place.
        isCorrect: true
      - content: CurrentStateChanged enables you to react to buffering events.
        explanation: Buffering events are supported in WPF apps.
        isCorrect: false