### YamlMime:ModuleUnit
title: Summary and knowledge check
uid: learn-windows.windows-10-ui-and-data.8-summary-and-knowledge-check
metadata:
  title: Summary and knowledge check
  description: Review and check your understanding of data binding in Windows apps.
  ms.date: 10/18/2022
  displayType: one-Column
  author: QuinnRadich
  ms.author: quradic
  ms.topic: interactive-tutorial
  ms.prod: learning-windows
  
durationInMinutes: 5
content: |
    [!include[](includes/8-summary-and-knowledge-check.md)]
quiz:
    title: Knowledge check
    questions:
        - content: What is data binding?
          choices:
          - content: A method of connecting your app to a database.
            explanation: Data binding does not require a database.
            isCorrect: false
          - content: A way to transfer data between the UI and the application's code.
            explanation: Data binding reflects changes of your objects' properties on the UI, and vice versa.
            isCorrect: true
          - content: Making sure that data does not change.
            explanation: Read-only data structures are not the goal of data binding.
            isCorrect: false
        - content: Which interface do you have to implement to reflect the change of a C# property on the UI?
          choices:
          - content: System.Collections.Specialized.INotifyCollectionChanged
            explanation: This interface is for reflecting changes in a collection, not a single property.
            isCorrect: false
          - content: System.ComponentModel.IReflectPropertyChanges
            explanation: There is no such interface.
            isCorrect: false
          - content: NotifyPropertyChanged
            explanation: This is the event defined in the interface we're looking for.
            isCorrect: false
          - content: System.ComponentModel.INotifyPropertyChanged
            explanation: Implementing INotifyPropertyChanged allows the UI to be notified when the value of a property has changed.
            isCorrect: true
        - content: What do you have to do to transfer text entered in a text box to a C# string property through data binding?
          choices:
          - content: Define the binding in XAML with Mode=OneWay.
            explanation: OneWay binding is used when data is bound from the binding source (your code) to the binding target (XAML).
            isCorrect: false
          - content: Define the binding in XAML with Mode=OneWay, and implement INotifyPropertyChanged in code.
            explanation: OneWay binding is used when data is bound from the binding source (your code) to the binding target (XAML).
            isCorrect: false
          - content: Define the binding in XAML with Mode=TwoWay.
            explanation: TwoWay binding provides bi-directional binding to and from the binding target.
            isCorrect: true
          - content: Define the binding in XAML with Mode=TwoWay, and implement INotifyPropertyChanged in code.
            explanation: Although this would work, you don't need to implement INotifyPropertyChanged if you only want to transfer data from the UI to your code.
            isCorrect: false
        - content: What do you need to do to display the objects stored in an IEnumerable collection in a list box?
          choices:
          - content: implement the System.Collections.Specialized.INotifyCollectionChanged interface, and bind the ItemsSource of the ListBox to the collection.
            explanation: You don't need to implement this interface in your code, unless you're creating your own collection class.
            isCorrect: false
          - content: Bind the ItemsSource of the ListBox to the collection.
            explanation: The ListBox will automatically create a XAML subtree (as defined in the ItemTemplate) for every object in the collection.
            isCorrect: true
          - content: Implement the System.ComponentModel.INotifyPropertyChanged interface, and bind the ItemsSource of the ListBox to the collection.
            explanation: INotifyPropertyChanged should only be used if you're replacing your IEnumerable object after initialization.
            isCorrect: false
        - content: You're adding items to your collection while the app is running. How do you make the UI reflect these changes?
          choices:
          - content: Implement the System.ComponentModel.INotifyPropertyChanged interface, and raise the PropertyChanged event every time a new item has been added to the collection.
            explanation: Although this works, this approach forces the UI to re-create the entire contents of the list, instead of just dealing with the one new item.
            isCorrect: false
          - content: Use the `System.Collections.ObjectModel.ObservableCollection<T>` class to store the collection of items.
            explanation: The `ObservableCollection<T>` class implements the System.Collections.Specialized.INotifyCollectionChanged interface that notifies the UI whenever items are added or removed.
            isCorrect: true
          - content: Implement the System.Collections.Specialized.INotifyCollectionChanged interface in your logic class, and raise the CollectionChanged event every time a new item has been added to the collection.
            explanation: This interface should be implemented by the collection class, not your business logic class.
            isCorrect: false
