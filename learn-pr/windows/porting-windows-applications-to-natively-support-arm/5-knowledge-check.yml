### YamlMime:ModuleUnit
uid: learn.learn-windows-on-arm.knowledge-check
title: Knowledge check
metadata:
  title: Knowledge check
  description: "Test your knowledge on porting Windows applications to Arm."
  ms.date: 5/6/2023
  author: mattwojo
  ms.author: mattwoj
  ms.topic: module-standard-task-based
  ms.prod: windows
  ms.technology: arm
durationInMinutes: 5
content: |
quiz:
  questions:
  - content: "What is the main motivation behind adding an Arm build to an existing Windows application?"
    choices:
    - content: "Arm devices are less expensive"
      isCorrect: false
      explanation: "While some Arm-based hardware is less expensive, this is not guaranteed."
    - content: "The inability to run x86/x64 applications on Windows on Arm"
      isCorrect: false
      explanation: "x86 and x64 based applications can run unmodified on Windows on Arm using emulation."
    - content: "To take full advantage of powerful hardware that is power-frugal and provides longer battery life."
      isCorrect: true
      explanation: "Arm-based devices are popular due to their power-frugal nature, longer battery life, and impressive processing power. In addition, Windows on Arm includes support for Neural Processing Units (NPU) tuned for AI and machine learning workloads. The best performance is attained by providing an Arm-native build of the application versus using emulation."
  - content: "A Windows UWP application is deployed to the Microsoft Store with an x86, Arm32, and Arm64 version. A Windows 11 on Arm device installs this application, which version of the app is installed?"
    choices:
    - content: "Arm64"
      isCorrect: true
      explanation: "Windows 11 on Arm will install the Arm64 version of the application."
    - content: "x86"
      isCorrect: false
      explanation: "When installing an application from the Microsoft Store, Windows 11 on Arm will install the most optimal version of the application, in this case it is Arm64."
    - content: "Arm32"
      isCorrect: false
      explanation: "When installing an application from the Microsoft Store, Windows 11 on Arm will install the most optimal version of the application, in this case it is Arm64."
  - content: "A Windows application has a very large codebase with multiple plugins and dependencies. Moving all code to Arm64 is not feasible in the near-term. What approach should be taken to move the application to Arm?"
    choices:
    - content: "Publish an x64 version"
      isCorrect: false
      explanation: "Publishing an x64 version of the application will run on Windows 11 for Arm devices through emulation, however will not move the application closer to the goal of being Arm-native."
    - content: "Publish an Arm64EC version"
      isCorrect: true
      explanation: "Publishing an Arm64EC version allows for code to be incrementally transitioned to Arm-native. It allows for x64 and Arm-native code to run side by side."
    - content: "Rewrite the application"
      isCorrect: false
      explanation: "Rewriting the entire application, plugins, and dependencies would not be feasible."
  - content: "When adding an ARM64 build to a Windows application project with a goal to have a 100% Arm-native build, it is determined there is a 3rd party dependency that does not have an Arm version. What is the first step to fix this problem?"
    choices:
    - content: "Provide an ARM64EC build"
      isCorrect: false
      explanation: "An ARM64EC build allows for both Arm code and x64 code to run side by side. However, this does not satisfy the goal of having a complete Arm-native build."
    - content: "Reach out to the 3rd party dependency owner and ask for an Arm build"
      isCorrect: true
      explanation: "Reaching out to the 3rd party dependency owner and asking for an Arm build is a good first step in attaining the goal of having a 100% Arm-native build."
    - content: "Commission an organization that specializes in updating code to support Arm"
      isCorrect: false
      explanation: "While still a valid step in attaining a complete Arm-native build, it is best to reach out to the dependency owner first."
  - content: "A Windows application has an x64, Arm64, and Arm64EC version. How should the application be published?"
    choices:
    - content: "Arm64"
      isCorrect: false
      explanation: "Publishing only the Arm64 build will exclude the popular x86/x64 market of devices."
    - content: "x64"
      isCorrect: false
      explanation: "Publishing the x64 version will work for x64 machines as well as Windows 11 on Arm devices, however, on Arm this application will run under emulation."
    - content: "Arm64X"
      isCorrect: true
      explanation: "Arm64X contains all build versions' code and entry points while eliminating redundant parts to save disk space. At runtime, Windows on Arm will automatically apply transformations to expose the correct underlying implementation, depending on the application's architecture."