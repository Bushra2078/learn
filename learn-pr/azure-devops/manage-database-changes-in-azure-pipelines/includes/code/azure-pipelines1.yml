variables:
  buildConfiguration: 'Release'
#  releaseBranchName: 'release-workflow'

# schedules:
# - cron: '*/5 * * * *'
#   displayName: Deploy every 5 minutes
#   branches:
#     include:
#     - release-workflow
#   always: 'false'

stages:
- stage: 'Build'
  displayName: 'Build Stage'
  jobs:
  - job: Build
    displayName: 'Build job'
    pool:
      vmImage: 'Ubuntu-16.04'
      demands:
        - npm
    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '2.1.505'
    steps:
    - task: DotNetCoreInstaller@0
      displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'

    - task: gulp@1
      displayName: 'Run gulp tasks'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true
    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop
  - job: BuildDacpac
    pool:
      name: Hosted Windows 2019 with VS2019
    variables:
      BuildConfiguration: Debug
      BuildPlatform: any cpu
    steps:
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: '**/*.csproj'  
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: '**/*.csproj'
        arguments: '--configuration $(BuildConfiguration)'
    - task: VSBuild@1
      displayName: 'Build project Tailspin.SpaceGame.Database/Tailspin.SpaceGame.Database.sqlproj'
      inputs:
        project: Tailspin.SpaceGame.Database/Tailspin.SpaceGame.Database.sqlproj
    - task: CopyFiles@2
      displayName: 'Copy dacpac file to Staging'
      inputs:
        Contents: |
          Tailspin.SpaceGame.Database/bin/**/*.dacpac
        TargetFolder: '$(Build.StagingDirectory)'  
    # - task: CopyFiles@2
    #   displayName: 'Copy dacpac, IaC, and data Files to Staging'
    #   inputs:
    #     Contents: |
    #      Database/bin/**/*.dacpac
    #      IaC/**
    #      data/**
    #     TargetFolder: '$(Build.StagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        PathtoPublish: '$(build.artifactstagingdirectory)'
        artifactName: dropDacpac
      condition: succeededOrFailed()

- stage: DBAVerificationScript
  jobs:
  - deployment: DBAVerificationScript
    displayName: DBA Verify DB Deployment Script
    pool:
      name: Hosted Windows 2019 with VS2019
    variables:
    - group: 'Release Pipeline'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: dropDacpac
            patterns: '**/*'
          
          # - task: SqlAzureDacpacDeployment@1
          #   displayName: Run Update DB Script from DBA
          #   inputs:
          #     azureSubscription: 'ca-abewan-demo-test (e97f6c4e-c830-479b-81ad-1aff1dd07470)'
          #     AuthenticationType: 'server'
          #     ServerName: '$(servername).database.windows.net'
          #     DatabaseName: '$(dbName)'
          #     SqlUsername: '$(adminlogin)'
          #     SqlPassword: '$(adminPasswordDev)'
          #     deployType: 'SqlTask'
          #     SqlFile: '$(Pipeline.Workspace)/drop/data/UpdateDB.sql'
          #     IpDetectionMethod: 'AutoDetect'

          - task: SqlAzureDacpacDeployment@1
            displayName: Generate Auto Gen DB Update Script
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              AuthenticationType: 'server'
              ServerName: 'tailspinsvr.database.windows.net'
              DatabaseName: 'Tailspin'
              SqlUsername: '$(adminlogin)'
              SqlPassword: '$(adminPassword)'
              deployType: 'DacpacTask'
              DeploymentAction: 'Script'
              DacpacFile: '$(Pipeline.Workspace)/dropDacpac/Tailspin.SpaceGame.Database/bin/Debug/Database.dacpac'
              IpDetectionMethod: 'AutoDetect'
          
          - task: PowerShell@2
            displayName: Show Auto Generated SQL Script
            inputs:
              targetType: 'inline'
              script: |
                Write-Host "Auto Generated SQL Update Script:"
                Get-Content d:\a\1\s\GeneratedOutputFiles\Tailspin_Script.sql | foreach {Write-Output $_}

- stage: DBAVerificationApply
  jobs:
  - deployment: DBAVerificationApply
    displayName: DBA Verify DB Deployment Apply
    pool:
      name: Hosted Windows 2019 with VS2019
    variables:
    - group: 'Release Pipeline'
    environment: 'dev-dbaverification'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: dropDacpac
            patterns: '**/*'              
          - task: SqlAzureDacpacDeployment@1
            displayName: 'Deploy SQL Schema'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              AuthenticationType: 'server'
              ServerName: 'tailspinsvr.database.windows.net'
              DatabaseName: 'Tailspin'
              SqlUsername: '$(adminlogin)'
              SqlPassword: '$(adminPassword)'
              deployType: 'DacpacTask'
              DeploymentAction: 'Publish'
              DacpacFile: '$(Pipeline.Workspace)/dropDacpac/Tailspin.SpaceGame.Database/bin/Debug/Database.dacpac'
              IpDetectionMethod: 'AutoDetect'

- stage: 'DeployDev'
  displayName: 'Deploy to dev environment'
  dependsOn: Build
  # condition: |
  #   and
  #   (
  #     succeeded(),
  #     eq(variables['Build.SourceBranchName'], variables['releaseBranchName'])
  #   )
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: dev
    variables:
    - group: 'Release Pipeline'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              appName: '$(WebAppNameDev)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'

- stage: 'DeployTest'
  displayName: 'Deploy to test environment'
  dependsOn: DeployDev
  #condition: eq(variables['Build.Reason'], 'Schedule')
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: test
    variables:
    - group: 'Release Pipeline'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              appName: '$(WebAppNameTest)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'

- stage: 'DeployStaging'
  displayName: 'Deploy to staging environment'
  dependsOn: DeployTest
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: staging
    variables:
    - group: 'Release Pipeline'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              appName: '$(WebAppNameStaging)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'