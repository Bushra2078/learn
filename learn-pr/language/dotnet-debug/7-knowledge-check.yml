### YamlMime:ModuleUnit
uid: learn.dotnet-debug.7-knowledge-check
title: Knowledge check
metadata:
  title: Knowledge check
  description: Check what you've learned.
  author: jongalloway
  ms.author: jogallow
  ms.date: 10/08/2020
  ms.topic: interactive-tutorial
  ms.prod: learning-azure
durationInMinutes: 2
quiz:
  title: Check your knowledge
  questions:
    - content: "When you want to write a line to the debug console only when debugging, which API should you use?"
      choices:
        - content: "System.Console.WriteLine"
          isCorrect: false
          explanation: "Incorrect, the System.Console APIs are always enabled and always write to the console"
        - content: "System.Diagnostics.Trace.WriteLine"
          isCorrect: false
          explanation: "Incorrect, this API only writes to attached listners when `TRACE` is defined."
        - content: "System.Diagnostics.Debug.WriteLine"
          isCorrect: true
          explanation: "That is correct, this API writes when attached to a debugger in the debug console output."
        - content: "System.WriteLine"
          isCorrect: false
          explanation: "There is no API in the System namespace to write a line to the debug console."
    - content: "If you want to write a debug message only when the count is `0`, what code would you use?"
      choices:
        - content: 'Debug.Assert(count != 0, "Count should not be 0.");'
          isCorrect: false
          explanation: "Close, Assert tests a condition and if it is true nothing will happen, else the application will enter break mode. So here, if the count is 0 it will enter break mode."
        - content: 'Debug.Assert(count == 0, "Count should not be 0.");'
          isCorrect: false
          explanation: "Incorrect, Assert tests a condition and if it is true nothing will happen, else the application will enter break mode. So here, if count is 0 nothing will happen."
        - content: 'Debug.WriteIf(count != 0, "Count should not be 0.");'
          isCorrect: false
          explanation: "Incorrect, this prints a message when count does not equal 0."
        - content: 'Debug.WriteIf(count == 0, "Count should not be 0.");'
          isCorrect: true
          explanation: "That is correct, this will only print a debug message when count is 0."
    - content: "What are the top two values a debugger provides?"
      choices:
        - content: "Control of your program execution, and observation of your program's state."
          isCorrect: true
          explanation: "That's correct! The two main values just about every debugger provides are the ability to control program execution and to observe program state."
        - content: "Modifying program values, and changing your program output"
          isCorrect: false
          explanation: "Changing your program's output is not useful, since it will only have effect when the application is being debugged."
        - content: "Observing your program's state, and modifying your program values"
          isCorrect: false
          explanation: "Observing and modifying values are important, but it's also very important to be able to control the flow of program execution."
        - content: "Editing your program while running, and editing program values"
          isCorrect: false
          explanation: "Editing programs is useful, observing your program's operational state is another important value that the .NET debugger provides."