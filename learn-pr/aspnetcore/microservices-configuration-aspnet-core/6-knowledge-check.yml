### YamlMime:ModuleUnit
uid: learn.microservices-configuration-aspnet-core.6-knowledge-check
metadata:
  title: Knowledge check
  description: Check your knowledge.
  author: scottaddie
  ms.author: scaddie
  ms.date: 10/16/2020
  ms.prod: learning-aspnetcore
  ms.topic: interactive-tutorial
title: Knowledge check
durationInMinutes: 5
content: |
quiz:
  title: Check your knowledge
  questions:
    - content: What's the key abstraction that supports the configuration system in ASP.NET Core apps?
      choices:
        - content: Feature Management library
          isCorrect: false
          explanation: "The Feature Management library provides standardized .NET APIs for managing feature flags within apps."
        - content: Configuration Provider
          isCorrect: true
          explanation: "A configuration provider is an abstraction over a specific configuration source, such as a JSON file. Configuration in an ASP.NET Core project is supported by one or more .NET Core configuration providers."
        - content: ConfigMap
          isCorrect: false
          explanation: "ConfigMap is an API object used to manage configuration in Kubernetes. It stores data in a collection of plain text key-value pairs."
        - content: Azure App Configuration
          isCorrect: false
          explanation: "Azure App Configuration is a centralized configuration service useful in microservices apps. In an ASP.NET Core app, Azure App Configuration is registered as another configuration provider."
    - content: "`<feature>` tag part of the `Microsoft.FeatureManagement.AspNetCore` NuGet package serves what purpose in ASP.NET Core Razor pages?"
      choices:
        - content: "`<feature>` tags are irrelevant to ASP.NET Core Razor Pages. They are added to the Angular view to render content based on a feature's state."
          isCorrect: false
          explanation: "`<feature>` tags are a feature specific to ASP.NET Core Razor pages that help render content based on a feature's state."
        - content: "`<feature>` tags are used to conditionally render content based on a feature's state in ASP.NET Core Razor Pages. "
          isCorrect: true
          explanation: "The `<feature>` tag can also be used to show content if any or all features in a list are enabled. To display alternate content when the requirements are not met the `negate` attribute can be used."
    - content: Which of the following statements is **NOT** true about Azure App Configuration?
      choices:
        - content: Azure App Configuration provides a service to centrally manage application settings and feature flags.
          isCorrect: false
          explanation: "A centralized configuration service is especially useful in apps that are distributed in nature. Use App Configuration to store all the settings for your app and secure their accesses in one place."
        - content: The easiest way to add an App Configuration store to your .NET Core app is through a client library provided by Microsoft.
          isCorrect: false
          explanation: "The NuGet package `Microsoft.Azure.AppConfiguration.AspNetCore` can be added to your projects to configure the Azure Configuration provider for your ASP.NET Core app."
        - content: Azure App Configuration does not encrypt my app settings.
          isCorrect: true
          explanation: "App Configuration encrypts all key values it holds, and it encrypts network communication. Key names and labels are used as indexes for retrieving configuration data and aren't encrypted."
        - content: Feature Management can be used to test a new business functionality in production.
          isCorrect: false
          explanation: "Use feature flags to grant early access to new functionality in production. For example, you can limit access to team members or to internal beta testers."

# 7. Mark all the correct statements about the Azure App Configuration store.

#     - You can handle any configuration item in the App Configuration store. - **CORRECT ANSWER**
#     - You can only handle a configuration value in App Configuration if it's been already defined in the ConfigMap.
#     - You need to restart the server application to take new values from the App Configuration store.
#     - You can use and App Configuration store in an ASP.NET Core application without any code change.
#     - You have to add the AppConfiguration provider during application startup to get values from the App Configuration store. - **CORRECT ANSWER**

