### YamlMime:ModuleUnit
uid: learn.aspnetcore.build-web-api-minimal-spa.knowledge-check
title: Knowledge check
metadata:
  title: Knowledge check
  description: Check your knowledge.
  ms.date: 11/04/2021
  author: softchris
  ms.author: chnoring
  ms.custom: team=nextgen
  ms.topic: interactive-tutorial
  ms.prod: learning-aspnetcore
durationInMinutes: 4
content: |
  [!include[](includes/6-knowledge-check.md)]
quiz:
  title: Check your knowledge
  questions:
    - content: What *isn't* an important property to consider when you're selecting an SPA framework?
      choices:
        - content: The framework is well documented.
          isCorrect: false
          explanation: Incorrect. It will definitely help development speed if there's good documentation.
        - content: The framework is built by using an actively developed framework.
          isCorrect: false
          explanation: Incorrect. This property is one of the most important properties to consider. If a framework isn't developed, bugs might not be fixed.
        - content: The framework is old.
          isCorrect: true
          explanation: Correct. Some SPA frameworks have been around a few years. The age of the framework has nothing to do with whether you should choose it. It's more important that the framework is popular, well tested, and maintained.

    - content: How would you as a front-end team tackle a project knowing that the back-end API isn't built yet?
      choices:
        - content: Wait for the back-end team to finish.
          isCorrect: false
          explanation: Incorrect. We recommend that you either work with the back-end team to build a vertical, or mock the response that you need.
        - content: Negotiate a contract with the back-end team, and then mock the response.
          isCorrect: true
          explanation: Correct. Mocking the response can help you move faster as a front-end team. Don't forget to switch to the actual back-end API when it is available.
        - content: Mock the response now, and you can sync with the back-end team later.
          isCorrect: false
          explanation: Incorrect. If you move ahead with mocking, without negotiating with the back-end team ahead of time, you might end up with mocked responses that don't quite match the reality of the back-end API when it is built.
    - content: What CORS policy should I have if I want only `http://example.com` to be allowed?
      choices:
        - content: You should allow \*.
          isCorrect: false
          explanation: Incorrect. This policy would allow `http://example.com`, but it also allows all other domains.
        - content: You should allow `http://example.com`.
          isCorrect: true
          explanation: Correct. This policy allows only `http://example.com`, and that is what you want.
        - content: You should allow \* and `http://example.com`.
          isCorrect: false
          explanation: Incorrect. This policy allows too much. You want to allow only `http://example.com`.
          
