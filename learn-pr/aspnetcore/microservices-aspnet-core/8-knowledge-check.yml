### YamlMime:ModuleUnit
uid: learn.microservices-aspnet-core.8-knowledge-check
metadata:
  title: Knowledge check
  description: Knowledge Check - Create and deploy a cloud-native ASP.NET Core microservice
  ms.date: 05/26/2020
  author: camsoper
  ms.author: casoper
  ms.topic: interactive-tutorial
  ms.prod: learning-aspnetcore
title: Knowledge check
durationInMinutes: 5
content: |
quiz:
  title: Check your knowledge
  questions:
    - content: "In a microservices architecture, how do individual microservices access their data?"
      choices:
      - content: "Data is stored in a master data store with which all microservices interact."
        isCorrect: false
        explanation: "The shared data store doesn't provide autonomy. Performing data schema updates can cause runtime conflicts for services accessing the same resources."
      - content: "Each microservice implements its own data store that's best optimized for its workload, storage needs, and read/write patterns."
        isCorrect: true
        explanation: "The data isolation gives every microservice the autonomy to independently perform data schema updates without breaking any other service in the production environment."
      - content: "Services don't directly store data. They send data to an event bus and it's processed by a data repository service."
        isCorrect: false
        explanation: "The event bus is used for inter-service communication, not data persistence."
    - content: "With regards to the ASP.NET Core Health Checks middleware, the code `services.AddHealthChecks().AddCheck(\"coupon-self\", () => HealthCheckResult.Healthy());` in `Startup.ConfigureServices` serves what purpose?"
      choices:
      - content: "Configures a Kubernetes liveness probe using HTTP GET."
        isCorrect: false
        explanation: "A Kubernetes liveness probe using HTTP GET is configured in the Kubernetes configuration YAML file."
      - content: "Registers a health check, named `coupon-self`, that returns the HTTP success code to the endpoint configured in the `Startup.Configure` method."
        isCorrect: true
        explanation: "For many apps, a basic health probe that reports the app's availability to process requests is sufficient. In the code example, the health check always returns a healthy state."
      - content: "Maps a health endpoint that is accessible at `<your-service>/liveness`."
        isCorrect: false
        explanation: "To map health check endpoints in ASP.NET Core, call `endpoints.MapHealthChecks(\"/liveness\");` in the `Startup.Configure` method."
    - content: "What is the benefit of using ACR?"
      choices:
      - content: "ACR allows public access to container images. Therefore, developers can access the images without authenticating."
        isCorrect: false
        explanation: "ACR is a private registry. Images can't be accessed without authentication."
      - content: "ACR is a private container registry and provides granular access control for development teams."
        isCorrect: true
        explanation: "ACR provides Azure service principals as an authentication method. They provide granular access to container images in ACR. For example, you can specify read-only access or full access to the container registry."
      - content: "ACR can support both public and private container registries."
        isCorrect: false
        explanation: "ACR supports private registries only."
