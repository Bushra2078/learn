<html>
<head>
<style>
body,html{font-family:Segoe UI,SegoeUI,Segoe WP,Helvetica Neue,Helvetica,Tahoma,Arial,sans-serif;font-weight:400;text-rendering:optimizeLegibility}
table,th,td{border:1px solid #000;border-collapse:collapse;padding:5px;}
blockquote{background-color:#eef;padding:5px;}
</style>
</head>
<body>
<p>In previous units, you've learned how to create a serverless web service Azure Function from a Maven archetype, how to build and run your function in the Cloud Shell, and how to configure your shell environment to test your function.</p>
<p>In this exercise, you'll apply the knowledge that you've gained to open an HTTP port in the Cloud Shell for testing your function. You'll build and run your function in the shell, and you'll create an API URL to test your function using a web browser.</p>
<h2 id="opening-an-http-port-for-testing">Opening an HTTP port for testing</h2>
<p>Before you can test your function remotely, you'll need to open a port so that HTTP requests are mapped to your function. This action will generate a public URL that you'll use later in this exercise to test your function.</p>
<ol>
<li><p>In the Azure Cloud Shell, use the following cURL command to open an HTTP port for testing:</p>
<pre><code class="language-bash">curl -X POST http://localhost:8888/openPort/7071
</code></pre>
</li>
<li><p>When the port is open, you will see a JSON response that resembles the following example:</p>
<pre><code class="language-json">{&quot;message&quot;:&quot;Port 7071 is open&quot;,&quot;url&quot;:&quot;https://gateway.westus.console.azure.com/n/cc-12345678/cc-12345678/proxy/7071/&quot;}
</code></pre>
<p>The JSON response will be concatenated into a single line as illustrated in the preceding example. However, the following example demonstrates what the JSON response would resemble if it was formatted:</p>
<pre><code class="language-json">{
    &quot;message&quot;: &quot;Port 7071 is open&quot;,
    &quot;url&quot;: &quot;https://gateway.westus.console.azure.com/n/cc-12345678/cc-12345678/proxy/7071/&quot;
}
</code></pre>
<p>This example should help you examine the data that is contained in the response.</p>
</li>
<li><p>Copy the URL from the JSON response in your instance of the Cloud Shell. Later in this exercise, you'll use that URL to test your function in a web browser.</p>
</li>
</ol>
<h2 id="building-and-running-your-function-in-the-cloud-shell">Building and running your function in the Cloud Shell</h2>
<p>After you have opened your port for testing, you're able to build and run your function.</p>
<ol>
<li><p>In the Azure Cloud Shell, change to the root folder for your application. For example:</p>
<pre><code class="language-bash">cd ~/event-reporting
</code></pre>
</li>
<li><p>Use the following Maven command to clean your project directory and build your function:</p>
<pre><code class="language-bash">mvn clean package
</code></pre>
<p>Maven will display a running status of the build process. The first time that you build your function, Maven will download dozens of supporting files; these files are the dependencies that are listed in your <em>pom.xml</em> and <em>host.json</em> files. The following excerpt shows an abbreviated example of a successful build:</p>
<pre><code class="language-output">[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building Azure Java Functions 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
. . .
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 8.509 s
[INFO] Finished at: 2020-01-01T04:55:05+00:00
[INFO] Final Memory: 57M/306M
[INFO] ------------------------------------------------------------------------
</code></pre>
</li>
<li><p>When Maven has finished building and packaging your function, use the following Maven command to run your function:</p>
<pre><code class="language-bash">mvn azure-functions:run
</code></pre>
<p>Maven will display a running status of the startup process. The following excerpt shows an abbreviated example of a successful startup:</p>
<pre><code class="language-output">[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building Azure Java Functions 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- azure-functions-maven-plugin:1.4.1:run (default-cli) @ event-reporting ---
[INFO] Azure Function App's staging directory found at: /home/user/event-reporting/target/azure-functions/event-reporting-20200101063700664
[INFO] Azure Functions Core Tools found.

                  %%%%%%
                 %%%%%%
            @   %%%%%%    @
          @@   %%%%%%      @@
       @@@    %%%%%%%%%%%    @@@
     @@      %%%%%%%%%%        @@
       @@         %%%%       @@
         @@      %%%       @@
           @@    %%      @@
                %%
                %

Azure Functions Core Tools (2.7.2184 Commit hash: 5afacc827c2848e4debc23bb96604f1ffce09cc7)
Function Runtime Version: 2.0.12961.0
. . .
Hosting environment: Production
Content root path: /home/user/event-reporting/target/azure-functions/event-reporting-20200101063700664
Now listening on: http://0.0.0.0:7071
Application started. Press Ctrl+C to shut down.

Http Functions:

        HttpExample: [GET,POST] http://localhost:7071/api/HttpExample

</code></pre>
<p>Your serverless function is now listening for HTTP requests.</p>
</li>
<li><p>Copy the URL section following the HTTP port; for example:</p>
<pre><code class="language-txt">/api/HttpExample
</code></pre>
<p>You'll use that URL excerpt in the next section of this exercise to test your function in a web browser.</p>
</li>
</ol>
<h2 id="testing-the-function-from-your-web-browser">Testing the function from your web browser</h2>
<p>Earlier in this exercise, you opened an HTTP port for testing; this port will enable you to test your application in a web browser. To do so, use the following steps.</p>
<ol>
<li><p>Construct the URL for your function's API:</p>
<ol>
<li><p>Retrieve the URL that you copied earlier in the <strong>Opening an HTTP port for testing</strong> section of this exercise; for example:</p>
<pre><code class="language-txt">https://gateway.westus.console.azure.com/n/cc-12345678/cc-12345678/proxy/7071/
</code></pre>
</li>
<li><p>Append the excerpt from your function's API URL that you copied earlier in the <strong>Building and running your function in the Cloud Shell</strong> section of this exercise; for example:</p>
<pre><code class="language-txt">https://gateway.westus.console.azure.com/n/cc-12345678/cc-12345678/proxy/7071/api/HttpExample
</code></pre>
</li>
<li><p>Append a query string that passes a name to the API URL; for example:</p>
<pre><code class="language-txt">https://gateway.westus.console.azure.com/n/cc-12345678/cc-12345678/proxy/7071/api/HttpExample?name=Bob
</code></pre>
</li>
<li><p>Copy this fully-constructed URL for use in the following steps.</p>
</li>
</ol>
</li>
<li><p>Open a new tab in your web browser, and paste the fully-constructed URL from the previous steps into the address field.</p>
</li>
<li><p>When you instruct your web browser to request the URL, you will see a plaintext message returned to your web browser that is personalized for the name you passed in the query string. For example:</p>
<pre><code class="language-output">Hello, Bob
</code></pre>
<p>In the Azure Cloud Shell, you should see a status message that is similar to the following example, which indicates that the request was successfully processed:</p>
<pre><code class="language-output">[1/1/20 7:08:11 AM] Executing HTTP request: {
[1/1/20 7:08:11 AM]   &quot;requestId&quot;: &quot;12345678-1234-1234-1234-123456789abc&quot;,
[1/1/20 7:08:11 AM]   &quot;method&quot;: &quot;GET&quot;,
[1/1/20 7:08:11 AM]   &quot;uri&quot;: &quot;/api/HttpExample&quot;
[1/1/20 7:08:11 AM] }
[1/1/20 7:08:12 AM] Executing 'Functions.HttpExample' (Reason='This function was programmatically called via the host APIs.', Id=12345678-1234-1234-1234-123456789abc)
[1/1/20 7:08:12 AM] Java HTTP trigger processed a request.
[1/1/20 7:08:12 AM] Function &quot;HttpExample&quot; (Id: 12345678-1234-1234-1234-123456789abc) invoked by Java Worker
[1/1/20 7:08:12 AM] Host lock lease acquired by instance ID '00000000000000000000000052DF09EB'.
[1/1/20 7:08:12 AM] Executed 'Functions.HttpExample' (Succeeded, Id=12345678-1234-1234-1234-123456789abc)
[1/1/20 7:08:13 AM] Executed HTTP request: {
[1/1/20 7:08:13 AM]   &quot;requestId&quot;: &quot;12345678-1234-1234-1234-123456789abc&quot;,
[1/1/20 7:08:13 AM]   &quot;method&quot;: &quot;GET&quot;,
[1/1/20 7:08:13 AM]   &quot;uri&quot;: &quot;/api/HttpExample&quot;,
[1/1/20 7:08:13 AM]   &quot;identities&quot;: [
[1/1/20 7:08:13 AM]     {
[1/1/20 7:08:13 AM]       &quot;type&quot;: &quot;WebJobsAuthLevel&quot;,
[1/1/20 7:08:13 AM]       &quot;level&quot;: &quot;Admin&quot;
[1/1/20 7:08:13 AM]     }
[1/1/20 7:08:13 AM]   ],
[1/1/20 7:08:13 AM]   &quot;status&quot;: 200,
[1/1/20 7:08:13 AM]   &quot;duration&quot;: 1759
[1/1/20 7:08:13 AM] }
</code></pre>
</li>
</ol>
<p>If you do not see any errors, then you have sucessfully tested your function locally!</p>
<p>In the next unit, you'll learn how to deploy your function to Azure Functions.</p>

</body>
</html>
