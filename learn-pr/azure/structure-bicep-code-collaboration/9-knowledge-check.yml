### YamlMime:ModuleUnit
uid: learn.azure.structure-bicep-code-collaboration.knowledge-check
title: Knowledge check
metadata:
  unitType: knowledge_check
  title: "Knowledge check"
  description: "Knowledge check"
  ms.date: 07/05/2021
  author: pazdedav
  ms.author: dapazd
  ms.topic: interactive-tutorial
  ms.prod: learning-azure
durationInMinutes: 3
content: |
  [!include[](includes/9-knowledge-check.md)]
quiz:
  questions:
  - content: Which of these steps should you take?
    choices:
    - content: Rename the `number`, `name`, and `name2` parameters.
      isCorrect: true
      explanation: "Correct. The parameters don't have clear names, so you should rename them to more meaningful identifiers."
    - content: Create a module for each resource.
      isCorrect: false
      explanation: "Incorrect. The resource definitions in this template are simple, so they don't need to be put into their own modules.."
    - content: "Create a new output to pass the the storage account key back to the user."
      isCorrect: false
      explanation: "Incorrect. You shouldn't emit secrets as outputs. Outputs aren't designed to handle secure data."
  - content: "How do you ensure that your template's users provide valid inputs for your parameters?"
    choices:
    - content: "You apply parameter decorators."
      isCorrect: true
      explanation: "Correct. Parameter decorators like `@maxLength` validate the input for each parameter."
    - content: "You apply Azure RBAC on your deployment scope."
      isCorrect: false
      explanation: "Incorrect. Azure RBAC defines the permissions users have on to access a given resource or group of resources. It doesn't validate the parameter values that your template users provide."
    - content: "You hard-code as many values into templates as possible."
      isCorrect: false
      explanation: "Incorrect. While hardcoding values prevent users from providing incorrect input, you can enable your template's users to provide input through parameters, and validate it using parameter decorators."
  - content: "What is one of the benefits of using configuration sets for your Bicep templates?"
    choices:
    - content: "You can expose all of your resources' properties to your template's users as parameters."
      isCorrect: false
      explanation: "Incorrect. When you use a configuration set, you minimize the number of parameters you expose to your template's users, and instead ask them to select a predefined set of configuration.."
    - content: "You can abstract the internal complexity of the template by providing a simple set of options."
      isCorrect: true
      explanation: "Correct. When you use a configuration set, you provide a discrete set of options your users can choose from."
    - content: "You can structure your template and group elements in any order."
      isCorrect: false
      explanation: "Incorrect. While it's true that you can structure your Bicep templates in many different ways, this is unrelated to configuration sets."
  - content: "How do you pass parameter values from your main template to modules?"
    choices:
    - content: "You use the `params` property in the module declaration."
      isCorrect: true
      explanation: "Correct. Parameters declared in a module are referenced from the main template's module declaration by using the `params` property."
    - content: "You provide a JSON parameters file for each module you use."
      isCorrect: false
      explanation: "Incorrect. Modules are compiled into a single Resource Manager template. You provide one parameters file for the deployment."
    - content: "Parameters for modules are not supported."
      isCorrect: false
      explanation: "Incorrect. Modules can include parameters. Their values are populated by referencing using the `params` property when you declare the module."
