### YamlMime:ModuleUnit
uid: learn.azure.create-composable-bicep-files-using-modules.knowledge-check
title: Knowledge check
metadata:
  unitType: knowledge_check
  title: Knowledge check
  description: Knowledge check.
  ms.date: 09/26/2021
  author: johndowns
  ms.author: jodowns
  ms.topic: interactive-tutorial
  ms.prod: learning-azure
durationInMinutes: 1
content: |
  [!include[](includes/5-knowledge-check.md)]
quiz:
  questions:
  - content: You deploy the *main.bicep* file with the default settings. You open the Azure portal and look at the deployment history for the resource group. What do you see?
    choices:
    - content: A single deployment named `main`.
      isCorrect: false
      explanation: Incorrect. Azure creates a deployment resource for each module, as well as the template you deploy.
    - content: Two deployments. One is named `main` and the other is named `storage1`.
      isCorrect: false
      explanation: Incorrect. Although Azure creates two deployments in this example, the module's deployment name is set by the `name` property, not the symbolic name.
    - content: Two deployments. One is named `main` and the other is named `my-storage`.
      isCorrect: true
      explanation: Correct. Azure creates two deployments in this example. By default, the template filename is used for the parent deployment's name. The module deployment's name is set by the `name` property.
  - content: You plan to update the *main.bicep* file to add another resource. The new resource needs access to the key of the storage account created in the module. What should you do?
    choices:
    - content: Create an output in the module and set its value to the storage account's connection string.
      isCorrect: false
      explanation: Incorrect. Outputs should not be used for secure data, because they are logged and may be accessible to a lot of people in your organization.
    - content: Use a Key Vault to create a secret.
      isCorrect: true
      explanation: Correct. You can define a Key Vault secret for the connection string value. Alternatively, you could use the `existing` keyword to read the properties of the storage account in another Bicep file.
    - content: You don't need to do anything. Properties for all the resources defined in the module are automatically available to the parent template.
      isCorrect: false
      explanation: Incorrect. Properties for resources are only accessible within the Bicep file they're declared in.
  - content: Your colleague has created a large Bicep file that you want to decompose into modules. You want to identify the resources that should be defined together in each module. Which tool can you consider using to help you to achieve this task?
    choices:
    - content: Use the Bicep visualizer.
      isCorrect: true
      explanation: Correct. The Bicep visualizer helps to illustrate the relationships between your resources. It can help you to see any resources that are tightly coupled, which might indicate they should be in a module together.
    - content: Use the Bicep linter.
      isCorrect: false
      explanation: Incorrect. The Bicep linter scans your Bicep code for potential issues and warns when you're not following best practices.
    - content: Use the Azure ARM template documentation.
      isCorrect: false
      explanation: Incorrect. While the ARM template documentation can be useful, it's not likely to help you when you're trying to decide how to decompose a Bicep file into modules.
